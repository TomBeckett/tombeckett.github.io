<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>maven on Tom Beckett</title>
    <link>https://tombeckett.github.io/tags/maven/</link>
    <description>Recent content in maven on Tom Beckett</description>
    <image>
      <url>https://tombeckett.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://tombeckett.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 03 Jan 2022 01:00:00 +0000</lastBuildDate><atom:link href="https://tombeckett.github.io/tags/maven/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Checking dependencies for security vulnerabilities</title>
      <link>https://tombeckett.github.io/posts/checking-dependencies/</link>
      <pubDate>Mon, 03 Jan 2022 01:00:00 +0000</pubDate>
      
      <guid>https://tombeckett.github.io/posts/checking-dependencies/</guid>
      <description>A security vulnerability is a nightmare scenario. In my Spring: Security Hardening guide I explain that static code analysis can check your code for common security mistakes. But that raises another question - what about other people&amp;rsquo;s code?
When you consider that your code is actually a fraction of the deployed artifact it gets really scary.
Luckily for us, there is a variety of automation we can deploy to cover this scenario.</description>
    </item>
    
  </channel>
</rss>
