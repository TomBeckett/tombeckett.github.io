<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Tom Beckett</title>
    <link>https://tombeckett.github.io/posts/</link>
    <description>Recent content in Posts on Tom Beckett</description>
    <image>
      <url>https://tombeckett.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://tombeckett.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 03 Jan 2022 01:00:00 +0000</lastBuildDate><atom:link href="https://tombeckett.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Checking dependencies for security vulnerabilities</title>
      <link>https://tombeckett.github.io/posts/checking-dependencies/</link>
      <pubDate>Mon, 03 Jan 2022 01:00:00 +0000</pubDate>
      
      <guid>https://tombeckett.github.io/posts/checking-dependencies/</guid>
      <description>A security vulnerability is a nightmare scenario. In my Spring: Security Hardening guide I explain that static code analysis can check your code for common security mistakes. But that raises another question - what about other people&amp;rsquo;s code?
When you consider that your code is actually a fraction of the deployed artifact it gets really scary.
Luckily for us, there is a variety of automation we can deploy to cover this scenario.</description>
    </item>
    
    <item>
      <title>Skip the source, straight to the comments</title>
      <link>https://tombeckett.github.io/posts/skip-source-read-comments/</link>
      <pubDate>Sun, 02 Jan 2022 01:00:00 +0000</pubDate>
      
      <guid>https://tombeckett.github.io/posts/skip-source-read-comments/</guid>
      <description>Anyone who has been on Hacker News or Reddit long enough knows the meta joke - skip the source and go straight to the comments.
It gives both site&amp;rsquo;s an air of group think that the content is always the site itself, so why bother reading the linked source? If it&amp;rsquo;s really good, it will be quoted or just pasted in a top comment anyway..?
While an infinite amount of apes typing in /r/Superstonk, can create Shakespeare, often it just recreates the same thread over and over again.</description>
    </item>
    
    <item>
      <title>Spring Boot: Security Hardening</title>
      <link>https://tombeckett.github.io/posts/spring-security-hardening/</link>
      <pubDate>Tue, 28 Dec 2021 01:00:00 +0000</pubDate>
      
      <guid>https://tombeckett.github.io/posts/spring-security-hardening/</guid>
      <description>When working on the Squaddy App I&amp;rsquo;ve seen a LOT of internet background noise in our logs. It&amp;rsquo;s especially timely given the recent Log4j2 Remote Code Execution exploit.
We&amp;rsquo;ve done a lot of work to ensure we stay as safe as possible and I wanted to go through some recommendations.
What we mean by &amp;lsquo;Safe&amp;rsquo;? Whenever talking about security we&amp;rsquo;re really asking &amp;ldquo;How confident am I this will work as I expect?</description>
    </item>
    
    <item>
      <title>Spring Boot: Magic Beans</title>
      <link>https://tombeckett.github.io/posts/spring-magic/</link>
      <pubDate>Tue, 28 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tombeckett.github.io/posts/spring-magic/</guid>
      <description>A common complaint about Spring refers to Spring Magic and general confusion about how dependency injection works in Spring. It can be extremely confusing to get a stacktrace like this:
1 2 3 4 5 6 7  Error creating bean with name &amp;#39;beanA&amp;#39;: Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.example.demo.BeanB com.example.demo.BeanA.dependency; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [com.example.demo.BeanB] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency.</description>
    </item>
    
    <item>
      <title>Spring Boot: A quick introduction</title>
      <link>https://tombeckett.github.io/posts/spring-introduction/</link>
      <pubDate>Mon, 27 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tombeckett.github.io/posts/spring-introduction/</guid>
      <description>Five years ago I moved to Spring Boot from ASP.NET. Frankly, I found Java and the Spring Framework confusing and it was not my choice to use it.
Since then I&amp;rsquo;ve used many other backend technologies (Ruby on Rails, ASP.NET Core, Express/TypeScript) but I keep coming back to Spring. I&amp;rsquo;ve really had a change of heart with Spring.
Over those years I&amp;rsquo;ve had to teach many others about Spring and common questions come up:</description>
    </item>
    
    <item>
      <title>Why blog? Why now?</title>
      <link>https://tombeckett.github.io/posts/why-blog/</link>
      <pubDate>Tue, 21 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tombeckett.github.io/posts/why-blog/</guid>
      <description>I don&amp;rsquo;t really like blogging as a concept. My reaction is due to the tech world insisting every engineer should be blogging and how you should feel bad if you don&amp;rsquo;t. I&amp;rsquo;m a fairly private person with little to no online presence.
Despite this I&amp;rsquo;ve wanted to blog for a few years. As a side effect, I&amp;rsquo;m pretty guilty for sending my friends walls of text about my diehard feelings on various tech topics.</description>
    </item>
    
  </channel>
</rss>
