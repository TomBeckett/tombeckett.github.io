[{"content":"\u0026ldquo;How do I know if Im a Junior Dev?\u0026rdquo; is a common question for those new in their career and particular when suffering from impostor syndrome.\nThere are great answers online and want to add an additional unusual answer, not as a perfect guide but a rule of thumb.\nA gaming community comparison Following a few different video game subreddits and I often see two types of posters:\n The experienced player: Examples include long winded monologues about how a bad the latest patch breaks the games balance, how the technical implementation of anti-aliasing is inefficient or how a team threw a match by not understanding the latest meta. The new player: Usually a person saying how they brought the game on sale, love it and just played for five hours straight.  It\u0026rsquo;s kind of fun seeing how prevalent both types of posters are and how it difficult it is to understand sentiment on the game.\nPersonally I\u0026rsquo;m in the middle. I enjoy games, follow the drama but I don\u0026rsquo;t tend to post content and infrequently comment at all. If we believe the 1% Rule, most users are like me.\nApplying this to programming Projecting this to our programming communities, I think its possible to see where you may be on the bell curve.\n Excited and want to tell the world? Got many questions? Do you post your questions publicly? You\u0026rsquo;re probably just starting out and falling in love with programming. If you tend not to post, you know enough what to search for. This is the professionally employed, know enough to finish a project, getting things done at work silent majority I would say. Do you spend most of your time either answering questions or raging about how bad the Java GC is? You\u0026rsquo;re likely to be experienced enough in particular tech stack to know why something is good, and bad, at the same time. You\u0026rsquo;re deep enough to be frustrated by how almost perfect a solution is.  Not a one size fits all There are some fairly obvious flaws to this perspective. There are many extremely talented developers who don\u0026rsquo;t post or blog.\nYou could even argue that due to the Dunning–Kruger effect that the more you know, the less you post.\nI think this has merit, but I would counter that while experienced developers post less frequently, they probably post better quality content as they are likely to only post on topics they feel strong mastery over.\nUltimately, I suggest this is for discerning the different between a \u0026lsquo;Junior\u0026rsquo; developer and everyone else.\nTLDR; If you find yourself perhaps not posting as many questions (but instead instinctively knowing what to search or even helping others) I believe you\u0026rsquo;ve shown signs that you are no longer a Junior developer.\n","permalink":"https://tombeckett.github.io/posts/junior-dev/","summary":"\u0026ldquo;How do I know if Im a Junior Dev?\u0026rdquo; is a common question for those new in their career and particular when suffering from impostor syndrome.\nThere are great answers online and want to add an additional unusual answer, not as a perfect guide but a rule of thumb.\nA gaming community comparison Following a few different video game subreddits and I often see two types of posters:\n The experienced player: Examples include long winded monologues about how a bad the latest patch breaks the games balance, how the technical implementation of anti-aliasing is inefficient or how a team threw a match by not understanding the latest meta.","title":"How do I know if Im a Junior Dev?"},{"content":"Anyone who has ever sent lots of emails knows how it\u0026rsquo;s hard to get them delivered without going into spam. There\u0026rsquo;s an entire industry of providers to pay for and lots of technologies to prove you\u0026rsquo;re domain is legitimate such as SPF and DMARC.\nSomehow, every few days I get an email like this:\nWhat amazes me is that this are not marked as spam yet somehow violate every rule:\n Titles like WelcomeTo YourLifeInsurance 422. Contain only a \u0026lt;img /\u0026gt; or \u0026lt;iframe /\u0026gt; pointing to an S3 bucket. Have an email address like NXSlbwv-tsnObQ33wMv-noreply@ma-ek.wareeye.com. Are tagged to: a random name that is not mine.  The investigation begins After a few months I snap and begin my quest to find out who is sending these to me.\nAll domains are used once and purchased using namecheap.com and are entirely anonymous:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  tombeckett@Toms-MBP tombeckett % whois flurrieneat.biz  % IANA WHOIS server % for more information on IANA, visit http://www.iana.org % This query returned 1 object  Domain name: flurrieneat.biz Registry Domain ID: D6A4FDFA75BD14759AD6BF3307DAD8B41-NSR Registrar WHOIS Server: whois.namecheap.com Registrar URL: http://www.namecheap.com Updated Date: 2021-06-11T17:12:18.35Z Creation Date: 2020-06-29T16:59:01.87Z Registrar Registration Expiration Date: 2022-06-29T16:59:01.87Z Registrar: NAMECHEAP INC Registrar IANA ID: 1068 Registrar Abuse Contact Email: abuse@namecheap.com Registrar Abuse Contact Phone: +1.9854014545 Reseller: NAMECHEAP INC Domain Status: clientTransferProhibited https://icann.org/epp#clientTransferProhibited Registry Registrant ID: Registrant Name: Redacted for Privacy Registrant Organization: Privacy service provided by Withheld for Privacy ehf Registrant Street: Kalkofnsvegur 2 Registrant City: Reykjavik Registrant State/Province: Capital Region Registrant Postal Code: 101 Registrant Country: IS Registrant Phone: +354.4212434 Registrant Phone Ext: Registrant Fax: Registrant Fax Ext: Registrant Email: f3084f1b2d9f46ee85993f43453c6e65.protect@withheldforprivacy.com ......  Name Server: ns1.flurrieneat.biz Name Server: ns2.flurrieneat.biz DNSSEC: unsigned URL of the ICANN WHOIS Data Problem Reporting System: http://wdprs.internic.net/ \u0026gt;\u0026gt;\u0026gt; Last update of WHOIS database: 2022-01-15T21:19:17.15Z \u0026lt;\u0026lt;\u0026lt;  tombeckett@Toms-MBP tombeckett %   I think whats happening is someone is buying brand new domains which are not flagged (yet) or recently expired domains which are trusted by providers. That kind of explains why they get through, but why namecheap?\nA spammers paradise Namecheap have a unique set of features which make it perfect for sending large amount of spam:\n All domain information will point to WithheldForPrivacy.com (as seen in output above). You can purchase a .com domain for only £5 using bitcoin. They provide you with free email forwarding for 100 addresses. The abuse team seems to be extremely slow at investigating claims.  UK\u0026rsquo;s National Cyber Security Centre (NCSC) have released their annual report with a section on phishing and its pretty damning:\nIn this year\u0026rsquo;s report they state that Namecheap hosted 25%+ of fake UK govt phishing sites.\nThey also concluded:\n Looking specifically at the number of campaigns hosted by NameCheap against its monthly median attack availability, we see that by mid-year the median takedown times were consistently in excess of 60 hours. This undoubtedly made NameCheap an attractive proposition to host phishing and may explain the rise in monthly hosted campaigns that followed for UK government-themed phishing.\n The company line All this points to namecheap having a real problem with spam and in particular enforcing it in a timely manner.\nWhen it comes to communication with namecheap you have two real options:\n Namecheap Subreddit Namecheap CEO\u0026rsquo;s Twitter  Firstly, the Subreddit is flooded with examples of spam reports and how abuse doesnt care. If you have a domain to report, this seems to be the way to actually get a response.\nSecondly, the CEO seems to get into real internet fights dismissing the problem:\nMore than 9 out of 10 abuse reports submitted to us are false or incorrect. We processed/investigated 1.1 million abuse claims/reports in 2020 and only 100k of them were actually found to be linked to abuse. Less than 1 percent of domains registered with us. Submit a ticket.\n\u0026mdash; Richard Kirkendall (@NamecheapCEO) March 9, 2021  For example, there is 1 criminal gang that we\u0026#39;ve been fighting against targeting UK delivery services and banks. You live in your own bubble and that\u0026#39;s all you care about and are exposed to.\n\u0026mdash; Richard Kirkendall (@NamecheapCEO) April 23, 2021  According to your thinking we should be out of business by now since \u0026quot;the only people using Namecheap are cybercriminals\u0026quot;. The fact is, we have always collectively lost money on abuse.\n\u0026mdash; Richard Kirkendall (@NamecheapCEO) August 25, 2021  And its a big fan of Crypto, so I think this strategy is going to stay:\n190,000 real commerce transactions since we launched about 1 year ago. BTCpay for the win. https://t.co/esiufXuEbl\n\u0026mdash; Richard Kirkendall (@NamecheapCEO) September 16, 2021  Conclusion There can\u0026rsquo;t be much money in £5 domains once a year, but if you can sell a domain for only for 47 hours to a spammer, then thats good recurring income.\nIronically, by tackling the spam quickly they look like the good guys, a real win-win. Time to move email provider as I suspect these emails won\u0026rsquo;t change any time soon.\n","permalink":"https://tombeckett.github.io/posts/namecheap-spam/","summary":"Anyone who has ever sent lots of emails knows how it\u0026rsquo;s hard to get them delivered without going into spam. There\u0026rsquo;s an entire industry of providers to pay for and lots of technologies to prove you\u0026rsquo;re domain is legitimate such as SPF and DMARC.\nSomehow, every few days I get an email like this:\nWhat amazes me is that this are not marked as spam yet somehow violate every rule:","title":"Namecheap: A hive of spam and villainy"},{"content":"Here\u0026rsquo;s my reflection on what technologies I used in 2021 and what I\u0026rsquo;d like to use in 2022. I also detail my current preferred stack for this year.\n2021 The Rules I\u0026rsquo;ve used a lot of different technologies in 2021.\nTo keep things sensible, I had to use the technology\u0026hellip;\n In production with real customers - that means no \u0026lsquo;I did the tutorial\u0026rsquo; opinions allowed. Either for the first time or after a break.  I\u0026rsquo;ll keep my opinions short to prevent this article getting too long.\nVueJS I\u0026rsquo;m a big React fan and switching to VueJS for a couple of months was eye opening. Overall I like the approach of mixing your HTML and JavaScript in a \u0026lt;script\u0026gt; tag and I think for simple use cases (which don\u0026rsquo;t require a huge SPA app) VueJS is excellent.\nHowever, I didn\u0026rsquo;t like the lack of TypeScript support in the HTML and I actually think VueJS 3\u0026rsquo;s composition api to be a step backwards.\nVerdict: I\u0026rsquo;m open to working with VueJS more and may revisit VueJS3 again. But for now, I\u0026rsquo;ll be sticking with React.\nPython 3 I\u0026rsquo;ve used Python a few times previously for short DevOps scripts (basically whenever Bash gets too much) but this year I had to create a few dashboards using Python. Nothing too complex but enough to make me realise that unless I needed a Python only library, I\u0026rsquo;d rather try R or Go more; it\u0026rsquo;s not bad just not good.\nAsking colleagues how to import files into other files, how best to get our artifact into a shippable form or use environment variables all could be done, but felt harder than it should be.\nAfter thinking I was crazy, I spoke to a colleague who put it well:\n Python has an easy onboarding experience, but after a while you start to need deep knowledge to keep it performant and build something really big with it.\n On the other hand, I really enjoyed using PyCharm for a few months and having used Rider and IntelliJ it really helped bridge the gap for someone so rusty.\nVerdict: I\u0026rsquo;ll be trying to learn an alternative in 2022.\nAWS SAM \u0026amp; CloudFormation I did a lot of Amazon Web Services (AWS) this year. I\u0026rsquo;ve used a lot of Ansible, Azure Resource Templates and Terraform in the past and so it felt natural to use AWS SAM and CloudFormation.\nIt often did what I wanted to even if it took a few tries. That said\u0026hellip;\n I hated the error messages both tools would give on failure. This got better over time due to SAM fixes and my own knowledge improving. Stack drift is still something I don\u0026rsquo;t think AWS has resolved. If a stack fails during creation you then have to remove manually (rather than try again) is just time consuming. It\u0026rsquo;s also far too easy to get yourself into a circular dependency chain with the only fix being to break your stacks up in unusual ways. AWS documentation is often contradictory with out-of-date blogs being a particular issue or tutorials that simply don\u0026rsquo;t work. CloudFormation (and by extension SAM) often doesn\u0026rsquo;t have support for new services. This goes against the advice AWS themselves give all users - automate all deployments, don\u0026rsquo;t use the UI.  After all that you may think \u0026ldquo;gee, I guess you\u0026rsquo;re going to not use AWS then?\u0026rdquo; but I will still be using AWS as my primary cloud. Unfortunately AWS is at the scale they can afford to have a bad developer experience. Also they\u0026rsquo;re completing against GCP and Azure which are somehow worse.\nVerdict: Please CloudFlare or Vercel save us all in 2022.\nAWS Lambda \u0026amp; DynamoDB Lambda and DynamoDB are some of the oldest services provided by AWS. They have been far and away the better experiences mostly due to how basic they are. Updating both has been quick with good SAM/Cloudformation support.\nI would not hesitate to use both again but I did learn somethings I would insist on:\n DynamoDB should either be treated as either a hashmap/temporary storage OR a single table with many object types. Multi-table is a mistake. Lambda provisioned capacity is a trick and you\u0026rsquo;re better of moving it to ECS as a dedicated always on service. Use Step Functions whenever possible. HTTP API Gateway works okay but I\u0026rsquo;d avoid hosting an entire API with only lambdas again. That\u0026rsquo;s a post in itself but it was a real nightmare.  Verdict: Use it but for small services. If they get too big, move them to a container.\nAWS Elastic Container Service (ECS) After the API Gateway nightmare I mentioned above, I moved to containers and this is how I\u0026rsquo;d host any backend in future.\nIt\u0026rsquo;s been fairly bulletproof and supports A/B or Blue/Green deployments, secrets, auto scaling and is well supported with infrastructure as code.\nVerdict: I have no complaints.\nAWS S3 It took a while to get used to S3. It\u0026rsquo;s extremely basic with often too many options. Configuring permissions (ACL/Policies) or CORS in particular is just a nightmare. I think the integration with CloudFront (often what you should be using) is flakey at best.\nThat said, I have a good set of CloudFormation templates now (for IAM/CloudFront and S3) and I\u0026rsquo;ve mostly learn which parts to ignore. I would not say this is easy service to learn but as with most things AWS - you\u0026rsquo;ve not got a lot of choice right now.\nVerdict: Use it, but only because I have to.\nGoogle CloudBuild \u0026amp; CloudRun I use Firebase Website Hosting (which is CloudRun) for a few websites and also build/host our main Slackbot using GCP. It was fairly painless and I don\u0026rsquo;t tend to go into GCP very often - only for Google Workspace/Domain/SAML settings. This leaves me feeling conflicted.\nOn the one hand, I find it easy to use to get going and it\u0026rsquo;s nice to not be locked into AWS - both financially and in knowledge. On the other, I find the UX somehow even worse than AWS. It is so bad I can\u0026rsquo;t actually describe it.\nVerdict: If I was forced to switch to CloudRun I could use it but it\u0026rsquo;s not my chosen tool.\nFirebase Auth This is Firebase\u0026rsquo;s killer product. Better than Hosting, Functions, Analytics, Crashlytics even Database. It\u0026rsquo;s all the things AWS Cognito should have been.\nVerdict: Used it on two projects, would use again.\nCypress It seems like this was the year Cypress arrived. It was everywhere in the JavaScript world and really came into its own in 2020/2021. It\u0026rsquo;s the best way to functionally test a SPA application.\nBut it still needs improving and I\u0026rsquo;ve often found it to completely break (or slow to a crawl) between major versions. It doesn\u0026rsquo;t feel mature as a project yet.\nVerdict: My tool of choice but I do try to avoid updating it unless I need to.\nSinon/Chai I was recommended to switch our Jest tests to Sinon/Chai by a JavaScript guru. I\u0026rsquo;m very much of the opinion that testing frameworks are extremely similar and usually don\u0026rsquo;t have any strong opinions. In this case, I absolutely prefer Sinon/Chai.\n The syntax is much better The tests are far faster. Mocking is closer to regular code than Jest mocking voodoo.  When paired with Cypress (which uses Chai syntax) it really unifies the testing experience. Thank you Chris!\nVerdict: Must use on each project for any TypeScript/JavaScript unit testing.\nSpring JPA Almost every item on this list was new to me in 2020 or 2021 but I\u0026rsquo;ve used Spring JPA for many years.\nIt makes the list because I actually took a break from it for a year or so and this year needed it for a major project. I dove deeper into Spring Data than I\u0026rsquo;ve ever had to before and really got a much better understanding of it and Hibernate as a result.\nThe more I learnt about Spring Data, JPA and Hibernate the more I liked it honestly.\nVerdict: My tool of choice for any database work. I can\u0026rsquo;t go back to a NodeJS runtime anymore.\n2022 My current stack Hosting  Cloud Provider: Amazon Web Services (AWS) Infrastructure As Code: AWS SAM, CloudFormation as backup Auth: Firebase Auth  Frontend  Frontend: React for SPA, Hugo, Nunjucks or NextJS SSR CDN/Hosting: AWS CloudFront + S3, deployed with SAWS SAM Styling: SAAS Testing: Unit Testing - Sinon/Chai. E2E Testing - Cypress  Backend  Stack: Java/Spring Boot ORM: Spring Data Database: DynamoDB/MySQL Small Services: AWS Lambda - TypeScript, deployed with AWS SAM Hosting: AWS ECS, deployed with AWS SAM Testing: JUnit5/Mockito  Utility  CI/CD: GitHub Actions Scripting: Python OS Configuration: Ansible Static Analysis: Java/TypeScript - SonarQube Payments: Stripe Checkout or Stripe Connected Accounts.  I\u0026rsquo;d like to learn more I\u0026rsquo;ve done some tutorials in the following but I\u0026rsquo;d like to really deep dive them with a real project. These could potentially change my preferred stack.\n Tailwind - SAAS Replacement? Go - Python/Java Replacement? Flutter - Interested in more mobile development. AWS CDK - SAM/CloudFormation replacement? Rust/Kotlin - Java Replacement?  ","permalink":"https://tombeckett.github.io/posts/technologies-2022/","summary":"Here\u0026rsquo;s my reflection on what technologies I used in 2021 and what I\u0026rsquo;d like to use in 2022. I also detail my current preferred stack for this year.\n2021 The Rules I\u0026rsquo;ve used a lot of different technologies in 2021.\nTo keep things sensible, I had to use the technology\u0026hellip;\n In production with real customers - that means no \u0026lsquo;I did the tutorial\u0026rsquo; opinions allowed. Either for the first time or after a break.","title":"Technologies Retrospective 2021"},{"content":"A security vulnerability is a nightmare scenario. In my Spring: Security Hardening guide I explain that static code analysis can check your code for common security mistakes. But that raises another question - what about other people\u0026rsquo;s code?\nWhen you consider that your code is actually a fraction of the deployed artifact it gets really scary.\nLuckily for us, there is a variety of automation we can deploy to cover this scenario.\nIn this article I\u0026rsquo;m going to demonstrate integrating OWASP Dependency Check using Maven but it\u0026rsquo;s important to understand what makes a dependency checker successful.\nSecurity context matters The OWASP Dependency Check website describes the tool as:\n \u0026hellip;a Software Composition Analysis (SCA) tool that attempts to detect publicly disclosed vulnerabilities contained within a project’s dependencies. It does this by determining if there is a Common Platform Enumeration (CPE) identifier for a given dependency. If found, it will generate a report linking to the associated CVE entries.\n You may think - \u0026ldquo;Well, this sounds like npm audit?\u0026rdquo;. And, I agree, kind of. The approach npm audit takes is a common one but to quote Dan Abramov - it\u0026rsquo;s Broken by Design.\nWhy? Well in summary, if a dependency is vulnerable, npm audit says every other library using that dependency must also be vulnerable. This seems logical.\nHowever as Dan demonstrates, many flagged CVE\u0026rsquo;s only occur at runtime despite the Create React App only producing static files - therefore having no runtime itself. These false positives cause a huge amount of confusion and administrative burden.\nBecause of this typical \u0026lsquo;all or nothing\u0026rsquo; approach, after a few build failures developers typically turn them off or ignore them entirely. Not what you want for a security tool.\n A vulnerability often requires a certain condition. If you or your library avoids that condition, your dependency is not vulnerable.\n The tool you choose must be ready to handle false positives. I would argue scanning docker files or npm audit fails in this aspect as there is no way to suppress a false positive and reporting completely ignores context.\nThe wishlist Regardless of technology stack I would say we\u0026rsquo;re looking for a tool that must:\n Run using the command line to allow continuous integration. Produce a report with detailed information on how the vulnerability affects the exact dependency in what context. Allow the CVE to be suppressed (ideally by minor version, SHA1, etc) with comments to future revisit.  Integrating OWASP Dependency-Check Add the following to your pom.xml as a Maven Plugin:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  \u0026lt;plugin\u0026gt;  \u0026lt;groupId\u0026gt;org.owasp\u0026lt;/groupId\u0026gt;  \u0026lt;artifactId\u0026gt;dependency-check-maven\u0026lt;/artifactId\u0026gt;  \u0026lt;version\u0026gt;6.5.1\u0026lt;/version\u0026gt;  \u0026lt;configuration\u0026gt;  \u0026lt;!-- Fail the build if any CVSS score is greater than 8. --\u0026gt;  \u0026lt;failBuildOnCVSS\u0026gt;8\u0026lt;/failBuildOnCVSS\u0026gt;  \u0026lt;!-- Skip artifacts not bundled in distribution (provided scope) --\u0026gt;  \u0026lt;skipProvidedScope\u0026gt;true\u0026lt;/skipProvidedScope\u0026gt;  \u0026lt;!-- .Disable Net content--\u0026gt;  \u0026lt;assemblyAnalyzerEnabled\u0026gt;false\u0026lt;/assemblyAnalyzerEnabled\u0026gt;  \u0026lt;nugetconfAnalyzerEnabled\u0026gt;false\u0026lt;/nugetconfAnalyzerEnabled\u0026gt;  \u0026lt;nuspecAnalyzerEnabled\u0026gt;false\u0026lt;/nuspecAnalyzerEnabled\u0026gt;  \u0026lt;!-- Suppress false positives --\u0026gt;  \u0026lt;suppressionFile\u0026gt;owasp-suppressions.xml\u0026lt;/suppressionFile\u0026gt;  \u0026lt;/configuration\u0026gt;  \u0026lt;executions\u0026gt;  \u0026lt;execution\u0026gt;  \u0026lt;goals\u0026gt;  \u0026lt;goal\u0026gt;check\u0026lt;/goal\u0026gt;  \u0026lt;/goals\u0026gt;  \u0026lt;/execution\u0026gt;  \u0026lt;/executions\u0026gt; \u0026lt;/plugin\u0026gt;   While there is a wide a variety of configuration options available to the maven plugin, I want to highlight a few:\n Line 7: We will fail any builds which have a high risk vulnerability. Line 9: We only care about dependencies directly bundled. Lines 11-13: We completely disable Microsoft DotNet as we\u0026rsquo;re only using Java. I\u0026rsquo;m unsure why this is not default but it will remove a warning. Line 15: We\u0026rsquo;ve provided an additional configuration file to suppress any false positives.  Lets quickly create a suppression file named owasp-suppressions.xml in the root of the project with the following contents:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;suppressions xmlns=\u0026#34;https://jeremylong.github.io/DependencyCheck/dependency-suppression.1.3.xsd\u0026#34;\u0026gt;  \u0026lt;!-- Waiting for dependency-check-maven 6.5.2 --\u0026gt;  \u0026lt;suppress\u0026gt;  \u0026lt;notes\u0026gt;\u0026lt;![CDATA[ file name: netty-tcnative-classes-2.0.46.Final.jar ]]\u0026gt;\u0026lt;/notes\u0026gt;  \u0026lt;sha1\u0026gt;9937a832d9c19861822d345b48ced388b645aa5f\u0026lt;/sha1\u0026gt;  \u0026lt;cve\u0026gt;CVE-2014-3488\u0026lt;/cve\u0026gt;  \u0026lt;cve\u0026gt;CVE-2015-2156\u0026lt;/cve\u0026gt;  \u0026lt;cve\u0026gt;CVE-2019-16869\u0026lt;/cve\u0026gt;  \u0026lt;cve\u0026gt;CVE-2019-20444\u0026lt;/cve\u0026gt;  \u0026lt;cve\u0026gt;CVE-2019-20445\u0026lt;/cve\u0026gt;  \u0026lt;cve\u0026gt;CVE-2021-21290\u0026lt;/cve\u0026gt;  \u0026lt;cve\u0026gt;CVE-2021-21295\u0026lt;/cve\u0026gt;  \u0026lt;cve\u0026gt;CVE-2021-21409\u0026lt;/cve\u0026gt;  \u0026lt;cve\u0026gt;CVE-2021-37136\u0026lt;/cve\u0026gt;  \u0026lt;cve\u0026gt;CVE-2021-37137\u0026lt;/cve\u0026gt;  \u0026lt;cve\u0026gt;CVE-2021-43797\u0026lt;/cve\u0026gt;  \u0026lt;/suppress\u0026gt;  \u0026lt;!-- Waiting on https://github.com/jeremylong/DependencyCheck/issues/3894 --\u0026gt;  \u0026lt;suppress\u0026gt;  \u0026lt;notes\u0026gt;\u0026lt;![CDATA[ file name: h2-1.4.200.jar ]]\u0026gt;\u0026lt;/notes\u0026gt;  \u0026lt;sha1\u0026gt;f7533fe7cb8e99c87a43d325a77b4b678ad9031a\u0026lt;/sha1\u0026gt;  \u0026lt;cve\u0026gt;CVE-2021-23463\u0026lt;/cve\u0026gt;  \u0026lt;/suppress\u0026gt;  \u0026lt;!-- We don\u0026#39;t use MySQL 5 --\u0026gt;  \u0026lt;suppress\u0026gt;  \u0026lt;notes\u0026gt;\u0026lt;![CDATA[ file name: flyway-mysql-8.3.0.jar ]]\u0026gt;\u0026lt;/notes\u0026gt;  \u0026lt;sha1\u0026gt;2c9fffc16febc8999205b85f1def5b2427cdf42e\u0026lt;/sha1\u0026gt;  \u0026lt;cve\u0026gt;CVE-2007-1420\u0026lt;/cve\u0026gt;  \u0026lt;cve\u0026gt;CVE-2007-2691\u0026lt;/cve\u0026gt;  \u0026lt;cve\u0026gt;CVE-2007-5925\u0026lt;/cve\u0026gt;  \u0026lt;cve\u0026gt;CVE-2009-0819\u0026lt;/cve\u0026gt;  \u0026lt;cve\u0026gt;CVE-2009-4028\u0026lt;/cve\u0026gt;  \u0026lt;cve\u0026gt;CVE-2010-1621\u0026lt;/cve\u0026gt;  \u0026lt;cve\u0026gt;CVE-2010-1626\u0026lt;/cve\u0026gt;  \u0026lt;cve\u0026gt;CVE-2010-3677\u0026lt;/cve\u0026gt;  \u0026lt;cve\u0026gt;CVE-2010-3682\u0026lt;/cve\u0026gt;  \u0026lt;cve\u0026gt;CVE-2012-5627\u0026lt;/cve\u0026gt;  \u0026lt;cve\u0026gt;CVE-2015-2575\u0026lt;/cve\u0026gt;  \u0026lt;cve\u0026gt;CVE-2017-15945\u0026lt;/cve\u0026gt;  \u0026lt;/suppress\u0026gt; \u0026lt;/suppressions\u0026gt;   I want to highlight a few parts of the configuration schema:\n Lines 3, 21 \u0026amp; 29: We\u0026rsquo;ve provided a comment on why we believe this to be a false flag. This could also be provided in the \u0026lt;notes\u0026gt; tag, but I try to reserve that for the name of the jar. Lines 8, 26 \u0026amp; 34: We\u0026rsquo;ve provided a unique SHA1 of the jar which contains a vulnerability. This will change over time but I believe this to be a good thing. We want to be re-assessing this list frequently! Lines 9-19, 27 \u0026amp; 35-45: We\u0026rsquo;ve provided a list of Common Vulnerabilities and Exposure (CVE) numbers to ignore.   Note: There are many other ways to flag a false positives and even false negatives so it\u0026rsquo;s worth exploring the documentation.\n Let\u0026rsquo;s next talk about why we\u0026rsquo;re suppressing these vulnerabilities:\n The netty-tcnative-classes-2.0.46.Final.jar related CVEs appears to be a false positive fixed in a future version. The h2-1.4.200.jar CVE appear to be a vulnerability in the checker itself (oh the irony!) and resolved in a future version. All flyway-mysql-8.3.0.jar CVEs are only present when using MySQL 5. It\u0026rsquo;s worth repeating: These are only false positives for our use case. If we were using MySQL 5 they very much apply.  Generating a report Reports will automatically be generated by running mvn verify.\nWhen generating a report the command line output should be similar to:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47  [INFO] Scanning for projects... [INFO] [INFO] --------------------------\u0026lt; app.squaddy:api \u0026gt;--------------------------- [INFO] Building api 0.0.1-SNAPSHOT [INFO] --------------------------------[ jar ]--------------------------------- [INFO] [INFO] --- dependency-check-maven:6.5.2:check (default-cli) @ api --- [INFO] Checking for updates [INFO] Skipping NVD check since last check was within 4 hours. [INFO] Skipping RetireJS update since last update was within 24 hours. [INFO] Check for updates complete (147 ms) [INFO] [INFO] Analysis Started [INFO] Finished Archive Analyzer (1 seconds) [INFO] Finished File Name Analyzer (0 seconds) [INFO] Finished Jar Analyzer (1 seconds) [INFO] Finished Dependency Merging Analyzer (0 seconds) [INFO] Finished Version Filter Analyzer (0 seconds) [INFO] Finished Hint Analyzer (0 seconds) [INFO] Created CPE Index (1 seconds) [INFO] Finished CPE Analyzer (5 seconds) [INFO] Finished False Positive Analyzer (0 seconds) [INFO] Finished NVD CVE Analyzer (0 seconds) [INFO] Finished RetireJS Analyzer (1 seconds) [INFO] Finished Sonatype OSS Index Analyzer (0 seconds) [INFO] Finished Vulnerability Suppression Analyzer (0 seconds) [INFO] Finished Dependency Bundling Analyzer (0 seconds) [INFO] Analysis Complete (13 seconds) [INFO] Writing report to: /Users/tombeckett/Documents/workspace/api/target/dependency-check-report.html [WARNING]  One or more dependencies were identified with known vulnerabilities in api:  flyway-mysql-8.3.0.jar (pkg:maven/org.flywaydb/flyway-mysql@%24%7Bproject.parent.version%7D, pkg:maven/org.flywaydb/flyway-mysql@8.3.0, cpe:2.3:a:mysql:mysql:\\$\\{project.parent.version\\}:*:*:*:*:*:*:*) : CVE-2007-2691   See the dependency-check report for more details.   [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time: 25.149 s [INFO] Finished at: 2022-01-03T21:46:29Z [INFO] ------------------------------------------------------------------------  Process finished with exit code 0   Line 29 mentions \u0026ldquo;Writing report to: xxxx/api/target/dependency-check-report.html\u0026rdquo; which occurs even on build failure.\nOpening this report will look something like:\nThere\u0026rsquo;s a wealth of information in this report such as your dependency tree, a list of CVE sources and a list of any vulnerabilities found.\nI should also praise theCopy suppression XML button which can be pasted into our owasp-suppressions.xml file 🙏🏻.\nFinishing up This really does only scratch the surface of the OWASP Dependency Check tool but I hope I\u0026rsquo;ve shown how it meets our requirements above. Since it is command line based, it could easily be integrated into any automated build process.\nChecking your dependencies (and their dependencies) is essential as more and more of our programs depend on others.\nFinally, as a challenge I recommend exploring the configuration options and in particular hints. This allows dependencies to be \u0026lsquo;banned\u0026rsquo; from programmatically only allowing certain versions of a dependency for example Logback over Log4J. Extremely useful for implementing security as code.\n","permalink":"https://tombeckett.github.io/posts/checking-dependencies/","summary":"A security vulnerability is a nightmare scenario. In my Spring: Security Hardening guide I explain that static code analysis can check your code for common security mistakes. But that raises another question - what about other people\u0026rsquo;s code?\nWhen you consider that your code is actually a fraction of the deployed artifact it gets really scary.\nLuckily for us, there is a variety of automation we can deploy to cover this scenario.","title":"Checking dependencies for security vulnerabilities"},{"content":"Anyone who has been on Hacker News or Reddit long enough knows the meta joke - skip the source and go straight to the comments.\nIt gives both site\u0026rsquo;s an air of group think that the content is always the site itself, so why bother reading the linked source? If it\u0026rsquo;s really good, it will be quoted or just pasted in a top comment anyway..?\nWhile an infinite amount of apes typing in /r/Superstonk, can create Shakespeare, often it just recreates the same thread over and over again.\nA posts lifecycle Getting points on Reddit or Hacker News is fairly easy but you\u0026rsquo;ll want to act quickly, so skim the post title, find the technology and post a familiar but easily disputed talking point:\n \u0026ldquo;Java? isn\u0026rsquo;t that an old slow language?\u0026rdquo; \u0026ldquo;PHP is always insecure, I don\u0026rsquo;t know why people use it!\u0026rdquo; \u0026ldquo;Node\u0026rsquo;s ecosystem is dangerous..\u0026rdquo; \u0026ldquo;Why didn\u0026rsquo;t they use TypeScript?/Go/Rust??\u0026rdquo;  After enough random comments to move the post from the new, more people will show up and dispute these claims. Don\u0026rsquo;t worry, they wont need to read the article either.\n \u0026ldquo;Wait, until you hear about how many sites run Wordpress..\u0026rdquo; \u0026ldquo;Have you heard about Laravel? it\u0026rsquo;s actually okay for PHP\u0026rdquo; \u0026ldquo;Try Deno/Yarn/nvm, it\u0026rsquo;s much better than npm\u0026rdquo; *\u0026ldquo;Go/Rust is a fad\u0026rdquo; \u0026ldquo;I don\u0026rsquo;t understand why we need TypeScript, JavaScript is fine\u0026rdquo;  The reaction to the reaction Eventually discussions of discussions will occur. Why PHP is so popular, do you need to learn a new language at all, the mandatory link to a relevant xkcd, TypeScript is good actually, webpack is an abomination and needs to be destroyed etc.\nI find these discussions extremely predicable and it\u0026rsquo;s not just me.\nMeta threads on both sites lament how despite having strong countercultures with strict rules against reposts, it\u0026rsquo;s hard to find new content.\nI depute this. It\u0026rsquo;s not the content, it\u0026rsquo;s the top user comments that are reposts.\nIt\u0026rsquo;s not just the readers who miss out While the linked source is probably happy they get any traffic, we\u0026rsquo;re training authors to write good titles and use A.I. to write the article.\nThey aren\u0026rsquo;t stupid and this game has become well established at this point. Want good traffic, make good title, skip the article body.\nWhy it happens I believe this all happens because both in source and in comments, people want to be noticed and heard, regardless of what originality.\nIt\u0026rsquo;s almost a weird internet nostalgia ritual - you say x, I say y back. I don\u0026rsquo;t think it\u0026rsquo;s inherently harmful as long as we acknowledge what\u0026rsquo;s happening.\nYou might learn something great in a comments section, but often you wasted some time in your day. It\u0026rsquo;s internet comfort food and thats okay. So lets stop pretending it\u0026rsquo;s all Shakespeare.\n","permalink":"https://tombeckett.github.io/posts/skip-source-read-comments/","summary":"Anyone who has been on Hacker News or Reddit long enough knows the meta joke - skip the source and go straight to the comments.\nIt gives both site\u0026rsquo;s an air of group think that the content is always the site itself, so why bother reading the linked source? If it\u0026rsquo;s really good, it will be quoted or just pasted in a top comment anyway..?\nWhile an infinite amount of apes typing in /r/Superstonk, can create Shakespeare, often it just recreates the same thread over and over again.","title":"Skip the source, straight to the comments"},{"content":"When working on the Squaddy App I\u0026rsquo;ve seen a LOT of internet background noise in our logs. It\u0026rsquo;s especially timely given the recent Log4j2 Remote Code Execution exploit.\nWe\u0026rsquo;ve done a lot of work to ensure we stay as safe as possible and I wanted to go through some recommendations.\nWhat we mean by \u0026lsquo;Safe\u0026rsquo;? Whenever talking about security we\u0026rsquo;re really asking \u0026ldquo;How confident am I this will work as I expect?\u0026rdquo;. No system is entirely secure and all security is ultimately based upon trust. Even in a zero trust security model, someone, somewhere, has to be trusted.\nUltimately it\u0026rsquo;s a business decision where and who is burdened with that trust.\nTo give a concrete example, we assume that all JSON Web Tokens are valid using Firebase Authentication SDK. For us, Firebase is our golden key and we believe that to be a small (and acceptable) amount of risk.\n Its important before doing any security hardening to know what needs to be secured and what are deemed as acceptable risks.\n Our aims should be:\n Minimize the attack surface. Secure all secrets in a vault. No one should know production passwords. Sanitize all user inputs. Redact sensitive information from logging. Add automated tooling to prevent security flaws before they are merged.  Minimize the attack surface Rather than providing lots of information thats already out there, I recommend:\n Enable Tomcat HTTPS or at least, have HTTPS for all services hitting your ingress. Use a Content Security Policy (CSP) for Cross Site Scripting (XSS) protection. Configure a Cross Site Request Forgery (CSRF) policy. This may include disabling it if using only REST. Test your response headers and remove any that give away more than they should (server type, allowed methods, etc). Use a Web Application Firewall (WAF) to block traffic your services should not serve, e.g. countries you don\u0026rsquo;t operate in or requests missing a JWT Authorization header.  Also, if your application is only available via REST, I recommend adding a default IndexController to serve browser traffic which is typically automated crawler/bots.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  /** * This controller is used to handle the case where the application is accessed via a browser. * \u0026lt;/p\u0026gt; * We want to return unauthorized to any request to prevent bots and crawlers from accessing the API. */ @Hidden //Hide from Swagger @RestController public class IndexController implements ErrorController {  private static final Logger LOGGER = LoggerFactory.getLogger(IndexController.class);   @RequestMapping(value = \u0026#34;/\u0026#34;)  public ResponseEntity\u0026lt;Void\u0026gt; index() {  return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();  }   @RequestMapping(value = \u0026#34;/error\u0026#34;)  public ResponseEntity\u0026lt;Void\u0026gt; error() {  return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();  }   @RequestMapping(value = \u0026#34;/robots.txt\u0026#34;)  public void robots(final HttpServletRequest request, final HttpServletResponse response) {  try {  response.getWriter().write(\u0026#34;User-agent: *\\nDisallow: /\\n\u0026#34;);  } catch (final IOException e) {  LOGGER.error(SecurityMarkers.EVENT_FAILURE, \u0026#34;Failed to write robots.txt\u0026#34;, e);  }  } }   The above will return 401 for any default or error pages and also return a disallow * for any robots.txt. This should help reduce the amount of crawler traffic.\nChoose a minimal runtime A primary concern is trusting that the runtime on our laptops is identical to production. Ensuring deployed dependencies - and therefore attack surface - is as small as possible.\nA key mitigation strategy is to create a Twelve-Factor App that can be securely tested and deployed by taking the same artifact through each environment. By only changing a few settings, it limits the amount of change and prevents unforeseen drift which leads to vulnerabilities.\nDocker has proven to be a good way to bundle an application and using Spring Profiles you can ensure the application can be configured in predictable ways.\n In a future post we\u0026rsquo;ll deep dive how to configure automated docker deployments to AWS Fargate using GitHub Actions.\n Configuring Maven Docker While it is possible to manually create a Dockerfile, I\u0026rsquo;ve found this produces surprisingly large images. It also creates another technology to learn and maintain security updates for.\nWe want a technology that always keeps up to date on every build and can produce a jar with only the required libraries. Luckily, Buildpack can do this for us using a Maven Plugin.\nAdding the following to your pom.xml and running mvn package will produce a docker image.\n1 2 3 4 5 6 7 8 9 10 11 12  \u0026lt;plugin\u0026gt;  \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt;  \u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt;  \u0026lt;configuration\u0026gt;  \u0026lt;image\u0026gt;  \u0026lt;name\u0026gt;${project.version}\u0026lt;/name\u0026gt;  \u0026lt;env\u0026gt;  \u0026lt;JAVA_TOOL_OPTIONS\u0026gt;-Xms2048m -Xmx2048m\u0026lt;/JAVA_TOOL_OPTIONS\u0026gt;  \u0026lt;/env\u0026gt;  \u0026lt;/image\u0026gt;  \u0026lt;/configuration\u0026gt; \u0026lt;/plugin\u0026gt;   Compared to a manual Dockerfile I\u0026rsquo;ve found this image to be much smaller and preconfigured with the correct Java flags.\n I\u0026rsquo;ve set the maximum allocation pool and initial memory size flags using JAVA_TOOL_OPTIONS. This is important as we want the to automatically set the correct heap size based on a proper memory size. I\u0026rsquo;ve found that the container does not quite understand its size when this is not set. YMMV.\n The buildpack used is the Bellsoft Liberica JDK. I would recommend also using the same JDK when developing locally to ensure consistency.\nInjecting environment variables You may be wondering, \u0026ldquo;How do we set things like database connections? They can\u0026rsquo;t be baked into the image right?\u0026rdquo;.\nFear not, when we deploy this image we can override any Spring environment variable we want for example, setting @Profile.\n1 2 3 4 5 6  \u0026lt;env name=\u0026#34;AWS_REGION\u0026#34; value=\u0026#34;eu-west-2\u0026#34; /\u0026gt; \u0026lt;env name=\u0026#34;spring.profiles.active\u0026#34; value=\u0026#34;prod\u0026#34; /\u0026gt; \u0026lt;env name=\u0026#34;app.squaddy.api.devMockUser.enabled\u0026#34; value=\u0026#34;false\u0026#34; /\u0026gt; \u0026lt;env name=\u0026#34;spring.datasource.username\u0026#34; value=\u0026#34;AUserName\u0026#34; /\u0026gt; \u0026lt;env name=\u0026#34;spring.datasource.password\u0026#34; value=\u0026#34;************\u0026#34; /\u0026gt; \u0026lt;env name=\u0026#34;spring.datasource.url\u0026#34; value=\u0026#34;jdbc:mysql://squaddy.******.eu-west-2.rds.amazonaws.com:3306/db\u0026#34; /\u0026gt;   While our API has around fifty environment settings, the difference between local, integration and production environments are only the most essential ones - database connection, AWS account information, etc. This gives us good confidence that the code we tested and the code being deployed is the same.\nRunning production, locally Now we\u0026rsquo;re confident that integration and production are similar, we should be able to make the reverse true - our local like integration or production.\nI recommend setting up a configuration in IntelliJ that is identical to integration or production. That way, you can switch over quickly to connect to the real services to aid debugging.\n If you are developing locally, having mock services is fine, but always have a ripcord to switch back to real ones.\n Secure all secrets in a vault Having a web certificate auto renew or a password auto-rotate is truly one of the best things about cloud services. It\u0026rsquo;s absolutely something you should be using. However, one of the challenges of getting those secrets into the runtime in a performant way.\nCurrently there seems to be two ways of achieving this (on AWS):\n Having the secret pull during runtime. Injecting the secret into build or deployment. Injecting the secret as an environment variable during startup.  They both have pro\u0026rsquo;s and con\u0026rsquo;s and go back to risk appetite in the business.\nPull during runtime  Expand for Java example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59  // Use this code snippet in your app. // If you need more information about configurations or implementing the sample code, visit the AWS docs: // https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/java-dg-samples.html#prerequisites  public static void getSecret() {   String secretName = \u0026#34;arn:aws:secretsmanager:eu-west-2:260023781495:secret:/secret/squaddy_dev/mysql-TFDMIj\u0026#34;;  Region region = Region.of(\u0026#34;eu-west-2\u0026#34;);   // Create a Secrets Manager client  SecretsManagerClient client = SecretsManagerClient.builder()  .region(region)  .build();   // In this sample we only handle the specific exceptions for the \u0026#39;GetSecretValue\u0026#39; API.  // See https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_GetSecretValue.html  // We rethrow the exception by default.   String secret, decodedBinarySecret;  GetSecretValueRequest getSecretValueRequest = GetSecretValueRequest.builder()  .secretId(secretName)  .build();  GetSecretValueResponse getSecretValueResponse = null;   try {  getSecretValueResponse = client.getSecretValue(getSecretValueRequest);  } catch (DecryptionFailureException e) {  // Secrets Manager can\u0026#39;t decrypt the protected secret text using the provided KMS key.  // Deal with the exception here, and/or rethrow at your discretion.  throw e;  } catch (InternalServiceErrorException e) {  // An error occurred on the server side.  // Deal with the exception here, and/or rethrow at your discretion.  throw e;  } catch (InvalidParameterException e) {  // You provided an invalid value for a parameter.  // Deal with the exception here, and/or rethrow at your discretion.  throw e;  } catch (InvalidRequestException e) {  // You provided a parameter value that is not valid for the current state of the resource.  // Deal with the exception here, and/or rethrow at your discretion.  throw e;  } catch (ResourceNotFoundException e) {  // We can\u0026#39;t find the resource that you asked for.  // Deal with the exception here, and/or rethrow at your discretion.  throw e;  }   // Decrypts secret using the associated KMS key.  // Depending on whether the secret is a string or binary, one of these fields will be populated.  if (getSecretValueResponse.secretString() != null) {  secret = getSecretValueResponse.secretString();  }  else {  decodedBinarySecret = new String(Base64.getDecoder().decode(getSecretValueResponse.secretBinary().asByteBuffer()).array());  }   // Your code goes here. }     Personally I am not a fan of the first one (which AWS gives the example for). I don\u0026rsquo;t like having a surprise when the secret doesn\u0026rsquo;t get pulled in runtime. This could happen for a variety of reasons but configuration/permissions change or network issue both seem like reasonable risks. I like things to fail early, ideally in the build or deployment process.\nInject into build or deployment So why not always use injection? Well theres issues there too. Injecting a secret into the build is a no go as it breaks the Twelve-Factor App principle.\nInject as environment variable during startup Finally, we have injecting the secret as an environment variable. This is commonly seen in AWS provided examples using Lambda.\nIt\u0026rsquo;s possible (although not well documented) that you can use a ECS Task Definition to get secrets during startup:\n1 2 3 4 5 6  \u0026#34;secrets\u0026#34;: [  {  \u0026#34;name\u0026#34;: \u0026#34;spring.datasource.password\u0026#34;,  \u0026#34;valueFrom\u0026#34;: \u0026#34;arn:aws:secretsmanager:eu-west-2:12345:secret:/secret/squaddy/mysql-:12345::password::\u0026#34;  }, ]   This one I like the most as it keeps secrets separate and not \u0026lsquo;baked in\u0026rsquo;. The negatives are:\n If secrets rotation will cause errors if they rotate during the runtime. Other issues may also arise if the secret needs to change. The secrets are in plain text in the AWS Console.  Sanitize all user inputs A key strategy in defensive programming is not to trust anything another client or user gives you. This doesn\u0026rsquo;t just mean security, it also means \u0026lsquo;bad data\u0026rsquo;.\nEnsure you understand who your client is Your tolerance for what a \u0026lsquo;client\u0026rsquo; means can vary between teams and businesses. For example, in a microservice architecture, do you trust other services? What about third party webhooks? Does having a shared secret or SSL help?\nCommon sanitization techniques Here\u0026rsquo;s an example from the Squaddy API:\n1 2 3 4 5 6 7 8 9 10 11 12 13  @PostMapping(value = \u0026#34;/group/chat\u0026#34;) public ResponseEntity\u0026lt;UploadRequestResponseDTO\u0026gt; generateChatFileSignedUrl(@RequestParam(\u0026#34;mimeType\u0026#34;)  @NotBlank(message = \u0026#34;MimeType must not be blank.\u0026#34;) final String mimeType,  @RequestParam(\u0026#34;extension\u0026#34;)  @NotBlank(message = \u0026#34;Extension must not be blank.\u0026#34;) final String extension,  @RequestParam(\u0026#34;groupId\u0026#34;)  @Min(value = 1L, message = \u0026#34;The value must be positive.\u0026#34;) final Long groupId) {  final var safeMimeType = Encode.forJava(mimeType);  final var safeExtension = Encode.forJava(extension);  return new ResponseEntity\u0026lt;\u0026gt;(  storageService.generateSignedUrl(safeMimeType.toLowerCase(Locale.ROOT), safeExtension.toUpperCase(Locale.ROOT), groupId.toString()), HttpStatus.CREATED  ); }   Firstly, I highly recommend using Spring Validation to check the inputs. For example @Min will reject any groupId less than 1.\nSecondly, know mimeType and extension will be present (as it must pass @NotBlank), we can\u0026rsquo;t be sure they are safe as they are strings. Common techniques to resolve this would be to trim whitespace or emoji\u0026rsquo;s from strings by running through regex to only allow numbers or alphanumeric. I am not a fan of this approach. Regex is famously complicated and I would recommend instead using the OWASP Java Encoder.\nFinally, you\u0026rsquo;ll note that we don\u0026rsquo;t do any sanitization on groupId. We know this to be a integer and (hopefully) fairly safe.\nThe key takeaways here are:\n A mix of validation and sanitization is required. No one approach is enough. Use a proper library over rolling your own regex or trimming. It\u0026rsquo;s cleaner and less prone to errors.  Redact sensitive information from logging One overlooked aspect to security is logging. When developing locally logging feels cheap but once deployed to production is hard to see the wood for the trees.\nThere are a few things to remember when it comes to security and logging:\nMask your logs Here is a quick introduction to adding owasp-security-logging and masking.\nAdd the following to your pom.xml:\n1 2 3 4 5  \u0026lt;dependency\u0026gt;  \u0026lt;groupId\u0026gt;org.owasp\u0026lt;/groupId\u0026gt;  \u0026lt;artifactId\u0026gt;security-logging-logback\u0026lt;/artifactId\u0026gt;  \u0026lt;version\u0026gt;LATEST\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt;   Now make sure to update any LOGGER calls with a new SecurityMarker.\n1 2  LOGGER.info(\u0026#34;userid={}\u0026#34;, userid); LOGGER.info(SecurityMarkers.CONFIDENTIAL, \u0026#34;password={}\u0026#34;, password);   This will later produce something similar to:\n1 2  2014-12-16 13:54:48,860 [main] INFO - userid=joebob 2014-12-16 13:54:48,860 [main] [CONFIDENTIAL] INFO - password=***********   As you can see, the second line as been redacted due to being CONFIDENTIAL.\nDon\u0026rsquo;t over log. Using Log Levels, owasp-security-logging and logstash-logback-encoder  a useful (but redacted) log can be produced.\n1  LOGGER.debug(SecurityMarkers.SECURITY_AUDIT, CHECKING_USER_MESSAGE, firebaseId);   Will produce:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  {  \u0026#34;@timestamp\u0026#34;: \u0026#34;2021-12-28T14:42:54.118Z\u0026#34;,  \u0026#34;@version\u0026#34;: \u0026#34;1\u0026#34;,  \u0026#34;message\u0026#34;: \u0026#34;Checking user exists: **********************\u0026#34;, // Redacted  \u0026#34;logger_name\u0026#34;: \u0026#34;app.squaddy.api.persistence.UserPersistenceService\u0026#34;,  \u0026#34;thread_name\u0026#34;: \u0026#34;http-nio-8080-exec-9\u0026#34;,  \u0026#34;level\u0026#34;: \u0026#34;DEBUG\u0026#34;,  \u0026#34;level_value\u0026#34;: 10000,  \u0026#34;transaction.id\u0026#34;: \u0026#34;8b6f99ac-272e-4476-b29c-e0f75cc87bd0\u0026#34;, // A unique id for this request  \u0026#34;transaction.requestMethod\u0026#34;: \u0026#34;GET\u0026#34;,  \u0026#34;transaction.requestUrl\u0026#34;: \u0026#34;/v2/user/groups/0\u0026#34;,  \u0026#34;transaction.proxyRemoteIp\u0026#34;: \u0026#34;*****\u0026#34;, // Redacted  \u0026#34;transaction.firebaseId\u0026#34;: \u0026#34;**********************\u0026#34;, // Redacted  \u0026#34;transaction.host\u0026#34;: \u0026#34;api.squaddy.app\u0026#34;,  \u0026#34;transaction.remoteIp\u0026#34;: \u0026#34;10.0.0.159\u0026#34;,  \u0026#34;transaction.isPublicApi\u0026#34;: \u0026#34;false\u0026#34;,  \u0026#34;transaction.userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36\u0026#34;,  \u0026#34;tags\u0026#34;: [  \u0026#34;SECURITY AUDIT\u0026#34; // A security marker added  ] }    By using a security markers and using levels we can restrict the overhead of logging for each environment without altering code.\n Encode your logs Log Forging or Log Injection is one of the top OWASP vulnerabilities and not often talked about. The same owasp-security-logging library can also be configured add CRLF encoding to any logged text.\nFor example:\n1 2 3 4 5 6 7  \u0026lt;conversionRule conversionWord=\u0026#34;crlf\u0026#34;  converterClass=\u0026#34;org.owasp.security.logging.mask.CRLFConverter\u0026#34; /\u0026gt;  \u0026lt;layout class=\u0026#34;ch.qos.logback.classic.PatternLayout\u0026#34;\u0026gt;  \u0026lt;Pattern\u0026gt;STDOUT %d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %crlf(%msg) %n  \u0026lt;/Pattern\u0026gt; \u0026lt;/layout\u0026gt;   I would also recommend switching to JSON in production over using standard console out as it\u0026rsquo;s a far more flexible (and searchable) format.\nAdd automated tooling to prevent security flaws before they are merged. A final piece in the puzzle is to introduce more automation. There are many options for static code analysis and as usual a mix (and configuration) is required to get a balanced view.\nAt Squaddy we use SonarQube\u0026rsquo;s hosted SonarCloud and Snyk. They both have excellent IntelliJ plugins and integrate well with GitHub Actions.\nAs mentioned no tool is perfect and SonarQube in particular can sometimes blur the lines between \u0026ldquo;we think this looks better\u0026rdquo;, \u0026ldquo;we believe this to be bad practice\u0026rdquo; and \u0026ldquo;this is a very bad security practice\u0026rdquo;. However on balance they are an absolute upgrade and even if after a bit of research I disagree, I am at least wiser for it.\nConclusion Thank you for reading and I hope this was useful. My intention was not to deep dive any one subject but more to provide thought on various aspects to security. There is no one size fits all and it doesn\u0026rsquo;t all need to happen in Sprint 0.\nUltimately security is an on-going and multi aspect concern. I\u0026rsquo;ve learnt over time that the better you understand your business needs, the easier it is to make security decisions.\n","permalink":"https://tombeckett.github.io/posts/spring-security-hardening/","summary":"When working on the Squaddy App I\u0026rsquo;ve seen a LOT of internet background noise in our logs. It\u0026rsquo;s especially timely given the recent Log4j2 Remote Code Execution exploit.\nWe\u0026rsquo;ve done a lot of work to ensure we stay as safe as possible and I wanted to go through some recommendations.\nWhat we mean by \u0026lsquo;Safe\u0026rsquo;? Whenever talking about security we\u0026rsquo;re really asking \u0026ldquo;How confident am I this will work as I expect?","title":"Spring Boot: Security Hardening"},{"content":"A common complaint about Spring refers to Spring Magic and general confusion about how dependency injection works in Spring. It can be extremely confusing to get a stacktrace like this:\n1 2 3 4 5 6 7  Error creating bean with name \u0026#39;beanA\u0026#39;: Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.example.demo.BeanB com.example.demo.BeanA.dependency; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [com.example.demo.BeanB] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}   The challenges of Inversion of Control Inversion of Control (IoC) is a way to create an object without expressly creating or managing its dependencies.\nTo explain why you may want IoC, I\u0026rsquo;m going to use a common onion architecture example seen in many REST services.\nvar config = { startOnLoad: true, theme: 'neutral', align: 'left' }; mermaid.initialize(config);  flowchart LR RestController -- BusinessService -- PersistenceService -.- Database[(Database)] RestController -- AnotherBusinessService -- PersistenceService  Lets say we want to make a new instance of a RestController:\n1 2 3 4 5 6 7 8 9 10  public class RestController {  final BusinessService businessService;  final AnotherBusinessService anotherBusinessService;   public RestController() {  var persistenceService = new PersistenceService(\u0026#34;someDatabaseConnection?\u0026#34;);  businessService = new BusinessService(persistenceService);  anotherBusinessService = new AnotherBusinessService(persistenceService);  } }   Thats.. fairly messy. We can imagine that as BusinessService expands to need more of its own dependencies we\u0026rsquo;re quickly going to get into maintainability issues.\n Where would you instantiate a common singleton across many controllers? What happens if PersistenceService has more of its own dependencies? Suddenly your passing dependencies of dependencies down many layers. As your application gets larger, you can imagine needing logging classes, database connections, etc. Thats a lot of crud in your constructors. This constructor logic can pollute downstream classes, violating the Single Responsibility Principle. Managing your own dependencies can cause circular dependency issues.  To give another example, imagine a scenario where you wanted a certain Database in production (MySQL) but a memory database locally (H2). In this circumstance you would need to put a nasty if somewhere in your code, depending on the environment.\nIts not.. bad but its not nice either. Lets see what other options we have available to us.\nSo what is a bean? A Bean is a Spring concept for an object that are under dependency management by the Spring Framework. Spring uses its own IoC Container that does this heavy lifting for you.\nTo register a bean you need to let Spring know what it should be managing and how it should be managed. In our example BusinessService, AnotherBusinessService and PersistenceService all should be managed. To do that, we need to use an Annotation.\n1 2 3 4  @Service // Added Spring annotation public class RestController {  }   By adding the @Service annotation we\u0026rsquo;re telling Spring that this class is a Business Service Facade aka its a business logic class and will be reused.\nAfter adding that annotation to the other classes, we can refactor our RestController.\n1 2 3 4 5 6 7 8  public class RestController {  @Autowired // Added Spring annotation  final BusinessService businessService;  @Autowired // Added Spring annotation  final AnotherBusinessService anotherBusinessService;   // Constructor has been removed. }   We\u0026rsquo;ve added @Autowired and removed the constructor. I hope you will agree that this is much cleaner and ultimately maintainable. But how does Autowired work?\nWhen the application starts, Spring looks for usages of @Autowired. Then it looks for any registered beans, in our case they have been registered using @Service. It will then consolidate all dependencies to reuse as many as possible during its runtime.\n There are other annotations that could be used (@Component or @Repository) but @Service seems to most appropriate in this use case.\nCorrect annotations can be a good source for documentation.\n I hope you agree that an Inversion of control framework can make code much more sustainable and ultimately more stable.\nAn alternative Some people do not like this style of injection as they feel using @Autowired too much like \u0026lsquo;magic\u0026rsquo; and not close enough to regular Java.\nI suspect this comes down to \u0026ldquo;Are you okay with Annotations in Java?\u0026rdquo;.\nWhile Spring is very annotation heavy, the Spring team is now offering (and even recommending) constructor injection. This is far closer to regular Java and other languages:\n1 2 3 4 5 6 7 8 9  public class RestController {  final BusinessService businessService;  final AnotherBusinessService anotherBusinessService;   public RestController(BusinessService businessService, AnotherBusinessService anotherBusinessService) {  this.businessService = businessService;  this.anotherBusinessService = anotherBusinessService;  } }   Effectively Spring just \u0026lsquo;knows\u0026rsquo; about what a BusinessService is from the @Service annotation. This keeps the RestController clean and understandable, it also gives us flexibility by still having a constructor.\nI personally do prefer this style as it removes two annotations and makes the code a bit easier to understand. We also have a constructor we can now use in our unit tests if required.\nWhen it goes wrong There are a few things to look out for when it comes to Spring IoC.\nDon\u0026rsquo;t use new Any attempts to create an object manually will mean Spring ignores that object and all its descendants. This may seem obvious but effectively when you annotate a class with @Service, @Component or @Repository you are handing over ownership to Spring IoC to create and manage that class. Using the new keyword may cause errors as the objects dependency tree wont be properly created.\nIts very much all or nothing when it comes to Spring IoC. In certain circumstances this may be fine (such as unit testing) but overall, it\u0026rsquo;s best to avoid creating objects yourself and letting Spring handle it.\nYou\u0026rsquo;ve added another class to a constructor Using our example from above, if you add another class to the constructor but do not annotate with @Service you will see an error:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  public class RestController {  final BusinessService businessService;  final AnotherBusinessService anotherBusinessService;  final NewService newService;   public RestController(BusinessService businessService, AnotherBusinessService anotherBusinessService, NewService newService) {  this.businessService = businessService;  this.anotherBusinessService = anotherBusinessService;  this.newService = newService; // new service without @Service annotation!  } }  // No annotation public class NewService() {}   NewService is not known\u0026hellip;\n1 2 3 4 5 6 7  Error creating bean with name \u0026#39;NewService\u0026#39;: Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.example.demo.NewService com.example.demo.NewService.dependency; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [com.example.demo.NewService] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}   In this situation adding @Service to NewService would register the class and allow Spring to manage this bean correctly.\n1 2  @Service // Annotation added. Bean should now be registered. public class NewService() {}   The above error stacktrace is the same example from the introduction. I hope this makes feels more approachable now!\nUsing alternative services In this final example we want to vary which service we get depending on if we\u0026rsquo;re running locally or in production. This is exceptionally powerful.\nvar config = { startOnLoad: true, theme: 'neutral', align: 'left' }; mermaid.initialize(config);  flowchart LR RestController -- BusinessService -- LocalBusinessServiceImpl RestController -- BusinessService -- ProductionBusinessServiceImpl  First, we create a shared interface with each service having the @Service annotation.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  public interface BusinessService {  String getEnvironment(); }  @Service public class LocalBusinessServiceImpl implements BusinessService {  public String getEnvironment() {  return \u0026#34;Local\u0026#34;;  } }  @Service public class ProductionBusinessServiceImpl implements BusinessService {  public String getEnvironment() {  return \u0026#34;Production\u0026#34;;  } }  public class RestController {  final BusinessService businessService;   public RestController(BusinessService businessService) {  this.businessService = businessService;  } }   Now we have an issue if we start the application Spring will throw a stacktrace error similar to:\n1 2 3 4 5 6 7 8 9  Description:  Field businessService in com.example.demo.RestController required a single bean, but 2 were found:  - businessService: defined by method \u0026#39;businessService\u0026#39; in class path resource [com/example/LocalBusinessServiceImpl.class]  - businessService: defined by method \u0026#39;businessService\u0026#39; in class path resource [com/example/ProductionBusinessServiceImpl.class]  Action:  Consider marking one of the beans as @Primary, updating the consumer to accept multiple beans, or using @Qualifier to identify the bean that should be consumed   Newcomers can get frustrated by the word bean and while the action appears clear, it does not help the programmer make a decision on where or why to add @Primary.\nWhats happening is Spring says \u0026ldquo;You have two possible candidates, which do you want to use?\u0026rdquo;. Remember that Spring IoC needs to know not only what but when to use a Bean.\nLets fix our code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  // Interface and RestController unchanged.  @Profile(\u0026#34;dev\u0026#34;) // New annotation @Service public class LocalBusinessServiceImpl implements BusinessService {  public String getEnvironment() {  return \u0026#34;Local\u0026#34;;  } }  @Profile(\u0026#34;prod\u0026#34;) // New annotation @Service public class ProductionBusinessServiceImpl implements BusinessService {  public String getEnvironment() {  return \u0026#34;Production\u0026#34;;  } }   Here we\u0026rsquo;ve added a @Profile annotation to tell Spring when to use each bean.\nWe also could have also used one of the recommended actions from the previous stacktrace:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  // Interface, RestController unchanged.  @Service public class LocalBusinessServiceImpl implements BusinessService {  public String getEnvironment() {  return \u0026#34;Local\u0026#34;;  } }  @Profile(\u0026#34;!dev\u0026#34;) // If its not dev @Order(1) // Use this one first @Service public class ProductionBusinessServiceImpl implements BusinessService {  public String getEnvironment() {  return \u0026#34;Production\u0026#34;;  } }    Remember, if you see a \u0026lsquo;bean\u0026rsquo; error its because Spring either has too many options or no options when configuring IoC.\n Conclusion I hope after this introduction to Spring you understand a bit more about:\n Why you should be using Spring\u0026rsquo;s inversion of control. How to configure a Spring Bean. Potential methods for resolving Spring bean stacktraces.  ","permalink":"https://tombeckett.github.io/posts/spring-magic/","summary":"A common complaint about Spring refers to Spring Magic and general confusion about how dependency injection works in Spring. It can be extremely confusing to get a stacktrace like this:\n1 2 3 4 5 6 7  Error creating bean with name \u0026#39;beanA\u0026#39;: Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.example.demo.BeanB com.example.demo.BeanA.dependency; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [com.example.demo.BeanB] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency.","title":"Spring Boot: Magic Beans"},{"content":"Five years ago I moved to Spring Boot from ASP.NET. Frankly, I found Java and the Spring Framework confusing and it was not my choice to use it.\nSince then I\u0026rsquo;ve used many other backend technologies (Ruby on Rails, ASP.NET Core, Express/TypeScript) but I keep coming back to Spring. I\u0026rsquo;ve really had a change of heart with Spring.\nOver those years I\u0026rsquo;ve had to teach many others about Spring and common questions come up:\n What exactly is Spring (and Spring Boot) Why is there so much \u0026lsquo;magic\u0026rsquo; (beans) going on? Isn\u0026rsquo;t Java a dead language?   To clarify, I\u0026rsquo;m not here to convince anyone that \u0026ldquo;Spring is awesome and suits every project\u0026rdquo;. But over the next few posts I do want to lower the bar for getting started.\n What is Spring? Here\u0026rsquo;s what the Spring docs have to say:\n Spring makes it easy to create Java enterprise applications. It provides everything you need to embrace the Java language in an enterprise environment, with support for Groovy and Kotlin as alternative languages on the JVM, and with the flexibility to create many kinds of architectures depending on an application’s needs.\n That\u0026rsquo;s fairly wordy but essentially its a framework for making enterprise applications. It can be further extended with Modules which are community driven. When people say \u0026ldquo;Spring\u0026rdquo; they refer to not just the Spring Framework but also to the modules built on top of it - the Spring stack or ecosystem.\nThis has the advantage of having many options but can also be very frustrating to newcomers.\nWhat does Spring mean by \u0026lsquo;Enterprise\u0026rsquo;? I\u0026rsquo;m not sure why Spring insists on name dropping enterprise as it can turn off many smaller developers and make the framework appear \u0026lsquo;heavy\u0026rsquo;.\nI would assert that many common enterprise problems are problems anyone faces when taking a project from their laptop to production:\n Support multiple deployment environments. In enterprise land this means not having direct access to production. Even if you do, you shouldn\u0026rsquo;t. Dependency injection and inversion of control. In the world of enterprise this can be different LDAP implementations, but even a local developer benefits by having a mock third party integration when running locally vs a real one in production. Transaction management. Many enterprises demand proper transactions around SQL updates, this is just good practice at any scale.  Who owns Spring? The framework is entirely Open Source and has an Apache 2.0 license. It is \u0026lsquo;free\u0026rsquo; as in beer.\nFrom an ownership perspective, the original founders\u0026rsquo; company - Spring (previously SpringSource) was brought by Pivitol Software which it self is now VMware Tanzu Labs.\nLooking at the contributors graph for Spring you\u0026rsquo;ll see VMware/Pivitol staff as the main core contributors.\n TLDR; Its open source but VMware owns the trademark.\n What is Spring Boot I hear people describe Spring Boot like this:\n Spring Boot is a bootstrap project (hence the name) maintained by the Spring team. It has sensible defaults already set and is designed to get going as quickly as possible.\n And I mostly agree. Its similar to Ruby on Rails or Create React App in that it gives you a stack to get going quickly.\nTypically people will use the Spring Initializr and choose additional dependencies such as Spring Web for a RESTful service with built in Apache Tomcat Server and Spring Security for authorization and authentication.\nThis is all nice, but in reality the biggest advantages when using Spring Boot is:\n All projects have a familiar structure. Common tasks (such as setting up logging, IoC, Maven, environment settings, etc) are setup saving time.  The second point is nice, but the first should be repeated:\n A common opinionated view way of working is a game changer when choosing a technology and forming a team.\n What Spring isn\u0026rsquo;t I would assert that a project (aka module) being in the Spring Framework is not any kind of seal of quality. Some projects are far more popular and well funded than others.\nIt\u0026rsquo;s not impossible for projects to leave the framework.\nRemember, it\u0026rsquo;s a collection of projects and modules. It\u0026rsquo;s down to experience to pick the ones right for you. Spring is only heavy if you want it to be.\n","permalink":"https://tombeckett.github.io/posts/spring-introduction/","summary":"Five years ago I moved to Spring Boot from ASP.NET. Frankly, I found Java and the Spring Framework confusing and it was not my choice to use it.\nSince then I\u0026rsquo;ve used many other backend technologies (Ruby on Rails, ASP.NET Core, Express/TypeScript) but I keep coming back to Spring. I\u0026rsquo;ve really had a change of heart with Spring.\nOver those years I\u0026rsquo;ve had to teach many others about Spring and common questions come up:","title":"Spring Boot: A quick introduction"},{"content":"I don\u0026rsquo;t really like blogging as a concept. My reaction is due to the tech world insisting every engineer should be blogging and how you should feel bad if you don\u0026rsquo;t. I\u0026rsquo;m a fairly private person with little to no online presence.\nDespite this I\u0026rsquo;ve wanted to blog for a few years. As a side effect, I\u0026rsquo;m pretty guilty for sending my friends walls of text about my diehard feelings on various tech topics. They reply suggesting I start a blog - I suspect as a coping mechanism.\nTheres a few reasons I feel apprehensive about blogging:\n I don\u0026rsquo;t feel like my writing skills are up to task. I\u0026rsquo;m not sure if my ideas are interesting enough for an entire lengthy post. It feels hipster and a bit look at me. I\u0026rsquo;m afraid that I\u0026rsquo;ll stop and people will see a blog thats clearly failed. Bloggers seems obsessed with making money.  For me it all comes down to motivation. I\u0026rsquo;ll blog only when I have something interesting to say. There wont be a regular schedule but when I do post I hope its interesting.\n","permalink":"https://tombeckett.github.io/posts/why-blog/","summary":"I don\u0026rsquo;t really like blogging as a concept. My reaction is due to the tech world insisting every engineer should be blogging and how you should feel bad if you don\u0026rsquo;t. I\u0026rsquo;m a fairly private person with little to no online presence.\nDespite this I\u0026rsquo;ve wanted to blog for a few years. As a side effect, I\u0026rsquo;m pretty guilty for sending my friends walls of text about my diehard feelings on various tech topics.","title":"Why blog? Why now?"}]